{"version":3,"sources":["components/Sidebar.js","components/Editor.js","App.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","react_default","a","createElement","key","id","className","concat","currentNote","onClick","setCurrentNoteId","body","split","index_es","icon","faTrash","e","deleteNote","newNote","Editor","_ref","updateNote","_useState","useState","_useState2","Object","slicedToArray","selectedTab","setSelectedTab","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","taskLists","js_default","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","App","JSON","parse","localStorage","getItem","setNotes","_useState3","_useState4","currentNoteId","createNewNote","nanoid","prevNotes","toConsumableArray","findCurrentNote","find","useEffect","setItem","stringify","length","react_split_es","sizes","direction","components_Sidebar","noteID","stopPropagation","oldNotes","filter","components_Editor","text","newArray","i","unshift","objectSpread","push","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cfd5619f.chunk.js","sourcesContent":["\n\nimport React from \"react\";\nimport \"../Styles.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst Sidebar = (props) => {\n\n    const noteElements = props.notes.map((note) => (\n        <div key={note.id} >\n            <div\n                className={`title ${note.id === props.currentNote.id ? \"selected-note\" : \"\"\n                    }`}\n                onClick={() => props.setCurrentNoteId(note.id)}\n            >\n                <h4 className=\"text-snippet\">{note.body.split(\"\\n\")[0]}</h4>\n                <FontAwesomeIcon className=\"sidebar--trash--button\" icon={faTrash} onClick={(e) => props.deleteNote(e, note.id)} ></FontAwesomeIcon>\n            </div>\n        </div>\n    ));\n\n    return (\n        <section className=\"pane sidebar\">\n            <div className=\"sidebar--header\">\n                <h3>Notes</h3>\n                <button className=\"new-note\" onClick={props.newNote}>+</button>\n            </div>\n            {noteElements}\n        </section>\n    )\n}\n\nexport default Sidebar;\n","import React, { useState } from \"react\";\nimport ReactMde from \"react-mde\";\nimport Showdown from \"showdown\";\nimport \"../Styles.css\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\n\nconst Editor = ({ currentNote, updateNote }) => {\n    const [selectedTab, setSelectedTab] = useState(\"write\")\n\n    const converter = new Showdown.Converter({\n        tables: true,\n        simplifiedAutoLink: true,\n        strikethrough: true,\n        taskLists: true,\n    })\n\n    return (\n        <section className=\"pane editor\">\n            <ReactMde\n                value={currentNote.body}\n                onChange={updateNote}\n                selectedTab={selectedTab}\n                onTabChange={setSelectedTab}\n                generateMarkdownPreview={(markdown) =>\n                    Promise.resolve(converter.makeHtml(markdown))\n                }\n                minEditorHeight={80}\n                heightUnits=\"vh\"\n            />\n        </section>\n    )\n}\n\nexport default Editor;","import React, { useState, useEffect } from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\nimport Split from \"react-split\"\nimport { nanoid } from \"nanoid\"\nimport \"./Styles.css\"\n\nconst App = () => {\n\n  const [notes, setNotes] = useState(\n    () => JSON.parse(localStorage.getItem(\"notes\")) || []\n  )\n\n\n  const [currentNoteId, setCurrentNoteId] = useState(\n    (notes[0] && notes[0].id) || \"\"\n  )\n\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes))\n  }, [notes])\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\"\n    }\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    setNotes(oldNotes => {\n      const newArray = [];\n      //Put the last edited note in the top\n      for (let i = 0; i < oldNotes.length; i++) {\n        if (oldNotes[i].id === currentNoteId) {\n          newArray.unshift({ ...oldNotes[i], body: text });\n        } else {\n          newArray.push(oldNotes[i]);\n        }\n      }\n\n      return newArray;\n    });\n  }\n\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId\n    }) || notes[0];\n  }\n\n  function deleteNote(e, noteID) {\n    e.stopPropagation();\n    setNotes((oldNotes) =>\n      oldNotes.filter(note => note.id !== noteID));\n  }\n\n  return (\n    <main>\n      {\n        notes.length > 0\n          ?\n          <Split\n            sizes={[30, 70]}\n            direction=\"horizontal\"\n            className=\"split\"\n          >\n            <Sidebar\n              notes={notes}\n              currentNote={findCurrentNote()}\n              setCurrentNoteId={setCurrentNoteId}\n              newNote={createNewNote}\n              deleteNote={deleteNote}\n            />\n            {\n              currentNoteId &&\n              notes.length > 0 &&\n              <Editor\n                currentNote={findCurrentNote()}\n                updateNote={updateNote}\n              />\n            }\n          </Split>\n          :\n          <div className=\"no-notes\">\n            <h1>You have no notes</h1>\n            <button\n              className=\"first-note\"\n              onClick={createNewNote}\n            >\n              Create one now\n            </button>\n          </div>\n\n      }\n    </main>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}